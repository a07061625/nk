/******/

// webpackBootstrap

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// Load entry module and return exports

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

/************************************************************************/

/* 0 */

/***/

/* 1 */

/* WEBPACK VAR INJECTION */

/*
 *
 * More info at [www.dropzonejs.com](http://www.dropzonejs.com)
 *
 * Copyright (c) 2012, Matias Meno
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

// The Emitter class provides the ability to call `.on()` on Dropzone to listen

// to events.

// It is strongly based on component's emitter class, and I removed the

// functionality because of the dependency hell with different frameworks.

// Add an event listener for given event

// Create namespace for this event

// Remove event listener for given event. If fn is not provided, all event

// listeners for that event will be removed. If neither is provided, all

// event listeners will be removed.

// specific event

// remove all handlers

// remove specific handler

// Exposing the emitter class, mainly for tests

/*
       This is a list of all available events you can register on a dropzone object.
        You can register an event handler like this:
        dropzone.on("dragEnter", function() { });
        */

/**
         * Has to be specified on elements other than form (or when the form
         * doesn't have an `action` attribute). You can also
         * provide a function that will be called with `files` and
         * must return the url (since `v3.12.0`)
         */

/**
         * Can be changed to `"put"` if necessary. You can also provide a function
         * that will be called with `files` and must return the method (since `v3.12.0`).
         */

/**
         * Will be set on the XHRequest.
         */

/**
         * The timeout for the XHR requests in milliseconds (since `v4.4.0`).
         */

/**
         * How many file uploads to process in parallel (See the
         * Enqueuing file uploads* documentation section for more info)
         */

/**
         * Whether to send multiple files in one request. If
         * this it set to true, then the fallback file input element will
         * have the `multiple` attribute as well. This option will
         * also trigger additional events (like `processingmultiple`). See the events
         * documentation section for more information.
         */

/**
         * Whether you want files to be uploaded in chunks to your server. This can't be
         * used in combination with `uploadMultiple`.
         *
         * See [chunksUploaded](#config-chunksUploaded) for the callback to finalise an upload.
         */

/**
         * If `chunking` is enabled, this defines whether **every** file should be chunked,
         * even if the file size is below chunkSize. This means, that the additional chunk
         * form data will be submitted and the `chunksUploaded` callback will be invoked.
         */

/**
         * If `chunking` is `true`, then this defines the chunk size in bytes.
         */

/**
         * If `true`, the individual chunks of a file are being uploaded simultaneously.
         */

/**
         * Whether a chunk should be retried if it fails.
         */

/**
         * If `retryChunks` is true, how many times should it be retried.
         */

/**
         * If not `null` defines how many files this Dropzone handles. If it exceeds,
         * the event `maxfilesexceeded` will be called. The dropzone element gets the
         * class `dz-max-files-reached` accordingly so you can provide visual feedback.
         */

/**
         * The name of the file param that gets transferred.
         * **NOTE**: If you have the option  `uploadMultiple` set to `true`, then
         * Dropzone will append `[]` to the name.
         */

/**
         * Whether thumbnails for images should be generated
         */

/**
         * In MB. When the filename exceeds this limit, the thumbnail will not be generated.
         */

/**
         * If `null`, the ratio of the image will be used to calculate it.
         */

/**
         * The same as `thumbnailWidth`. If both are null, images will not be resized.
         */

/**
         * How the images should be scaled down in case both, `thumbnailWidth` and `thumbnailHeight` are provided.
         * Can be either `contain` or `crop`.
         */

/**
         * If set, images will be resized to these dimensions before being **uploaded**.
         * If only one, `resizeWidth` **or** `resizeHeight` is provided, the original aspect
         * ratio of the file will be preserved.
         *
         * The `options.transformFile` function uses these options, so if the `transformFile` function
         * is overridden, these options don't do anything.
         */

/**
         * See `resizeWidth`.
         */

/**
         * The mime type of the resized image (before it gets uploaded to the server).
         * If `null` the original mime type will be used. To force jpeg, for example, use `image/jpeg`.
         * See `resizeWidth` for more information.
         */

/**
         * The quality of the resized images. See `resizeWidth`.
         */

/**
         * How the images should be scaled down in case both, `resizeWidth` and `resizeHeight` are provided.
         * Can be either `contain` or `crop`.
         */

/**
         * The base that is used to calculate the filesize. You can change this to
         * 1024 if you would rather display kibibytes, mebibytes, etc...
         * 1024 is technically incorrect, because `1024 bytes` are `1 kibibyte` not `1 kilobyte`.
         * You can change this to `1024` if you don't care about validity.
         */

/**
         * Can be used to limit the maximum number of files that will be handled by this Dropzone
         */

/**
         * An optional object to send additional headers to the server. Eg:
         * `{ "My-Awesome-Header": "header value" }`
         */

/**
         * If `true`, the dropzone element itself will be clickable, if `false`
         * nothing will be clickable.
         *
         * You can also pass an HTML element, a CSS selector (for multiple elements)
         * or an array of those. In that case, all of those elements will trigger an
         * upload when clicked.
         */

/**
         * Whether hidden files in directories should be ignored.
         */

/**
         * The default implementation of `accept` checks the file's mime type or
         * extension against this list. This is a comma separated list of mime
         * types or file extensions.
         *
         * Eg.: `image/*,application/pdf,.psd`
         *
         * If the Dropzone is `clickable` this option will also be used as
         * [`accept`](https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept)
         * parameter on the hidden file input as well.
         */

/**
         * **Deprecated!**
         * Use acceptedFiles instead.
         */

/**
         * If false, files will be added to the queue but the queue will not be
         * processed automatically.
         * This can be useful if you need some additional user input before sending
         * files (or if you want want all files sent at once).
         * If you're ready to send the file simply call `myDropzone.processQueue()`.
         *
         * See the [enqueuing file uploads](#enqueuing-file-uploads) documentation
         * section for more information.
         */

/**
         * If false, files added to the dropzone will not be queued by default.
         * You'll have to call `enqueueFile(file)` manually.
         */

/**
         * If `true`, this will add a link to every file preview to remove or cancel (if
         * already uploading) the file. The `dictCancelUpload`, `dictCancelUploadConfirmation`
         * and `dictRemoveFile` options are used for the wording.
         */

/**
         * Defines where to display the file previews â€“ if `null` the
         * Dropzone element itself is used. Can be a plain `HTMLElement` or a CSS
         * selector. The element should have the `dropzone-previews` class so
         * the previews are displayed properly.
         */

/**
         * This is the element the hidden input field (which is used when clicking on the
         * dropzone to trigger file selection) will be appended to. This might
         * be important in case you use frameworks to switch the content of your page.
         *
         * Can be a selector string, or an element directly.
         */

/**
         * If null, no capture type will be specified
         * If camera, mobile devices will skip the file selection and choose camera
         * If microphone, mobile devices will skip the file selection and choose the microphone
         * If camcorder, mobile devices will skip the file selection and choose the camera in video mode
         * On apple devices multiple must be set to false.  AcceptedFiles may need to
         * be set to an appropriate mime type (e.g. "image/*", "audio/*", or "video/*").
         */

/**
         * **Deprecated**. Use `renameFile` instead.
         */

/**
         * A function that is invoked before the file is uploaded to the server and renames the file.
         * This function gets the `File` as argument and can use the `file.name`. The actual name of the
         * file that gets used during the upload can be accessed through `file.upload.filename`.
         */

/**
         * If `true` the fallback will be forced. This is very useful to test your server
         * implementations first and make sure that everything works as
         * expected without dropzone if you experience problems, and to test
         * how your fallbacks will look.
         */

/**
         * The text used before any files are dropped.
         */

/**
         * The text that replaces the default message text it the browser is not supported.
         */

/**
         * The text that will be added before the fallback form.
         * If you provide a  fallback element yourself, or if this option is `null` this will
         * be ignored.
         */

/**
         * If the filesize is too big.
         * `{{filesize}}` and `{{maxFilesize}}` will be replaced with the respective configuration values.
         */

/**
         * If the file doesn't match the file type.
         */

/**
         * If the server response was invalid.
         * `{{statusCode}}` will be replaced with the servers status code.
         */

/**
         * If `addRemoveLinks` is true, the text to be used for the cancel upload link.
         */

/**
         * The text that is displayed if an upload was manually canceled
         */

/**
         * If `addRemoveLinks` is true, the text to be used for confirmation when cancelling upload.
         */

/**
         * If `addRemoveLinks` is true, the text to be used to remove a file.
         */

/**
         * If this is not null, then the user will be prompted before removing a file.
         */

/**
         * Displayed if `maxFiles` is st and exceeded.
         * The string `{{maxFiles}}` will be replaced by the configuration value.
         */

/**
         * Allows you to translate the different units. Starting with `tb` for terabytes and going down to
         * `b` for bytes.
         */

/**
         * Called when dropzone initialized
         * You can add event listeners here
         */

/**
         * Can be an **object** of additional parameters to transfer to the server, **or** a `Function`
         * that gets invoked with the `files`, `xhr` and, if it's a chunked upload, `chunk` arguments. In case
         * of a function, this needs to return a map.
         *
         * The default implementation does nothing for normal uploads, but adds relevant information for
         * chunked uploads.
         *
         * This is the same as adding hidden input fields in the form element.
         */

/**
         * A function that gets a [file](https://developer.mozilla.org/en-US/docs/DOM/File)
         * and a `done` function as parameters.
         *
         * If the done function is invoked without arguments, the file is "accepted" and will
         * be processed. If you pass an error message, the file is rejected, and the error
         * message will be displayed.
         * This function will not be called if the file is too big or doesn't match the mime types.
         */

/**
         * The callback that will be invoked when all chunks have been uploaded for a file.
         * It gets the file for which the chunks have been uploaded as the first parameter,
         * and the `done` function as second. `done()` needs to be invoked when everything
         * needed to finish the upload process is done.
         */

/**
         * Gets called when the browser is not supported.
         * The default implementation shows the fallback input field and adds
         * a text.
         */

// This code should pass in IE7... :(

// Removes the 'dz-default' class

/**
         * Gets called to calculate the thumbnail dimensions.
         *
         * It gets `file`, `width` and `height` (both may be `null`) as parameters and must return an object containing:
         *
         *  - `srcWidth` & `srcHeight` (required)
         *  - `trgWidth` & `trgHeight` (required)
         *  - `srcX` & `srcY` (optional, default `0`)
         *  - `trgX` & `trgY` (optional, default `0`)
         *
         * Those values are going to be used by `ctx.drawImage()`.
         */

// Automatically calculate dimensions if not specified

// Make sure images aren't upscaled

// Image is bigger and needs rescaling

// Method 'contain'

/**
         * Can be used to transform the file (for example, resize an image if necessary).
         *
         * The default implementation uses `resizeWidth` and `resizeHeight` (if provided) and resizes
         * images according to those dimensions.
         *
         * Gets the `file` as the first parameter, and a `done()` function as the second, that needs
         * to be invoked with the file when the transformation is done.
         */

/**
         * A string that contains the template used for each dropped
         * file. Change it to fulfill your needs but make sure to properly
         * provide all elements.
         *
         * If you want to use an actual HTML element instead of providing a String
         * as a config option, you could create a div with the id `tpl`,
         * put the template inside it and provide the element like this:
         *
         *     document
         *       .querySelector('#tpl')
         *       .innerHTML
         *
         */

// END OPTIONS

// (Required by the dropzone documentation parser)

/*
         Those functions register themselves to the events on init and handle all
         the user interface specific stuff. Overwriting them won't break the upload
         but can break the way it's displayed.
         You can overwrite them if you don't like the default behavior. If you just
         want to add an additional event handler, register it on the dropzone object
         and don't overwrite those options.
         */

// Those are self explanatory and simply concern the DragnDrop.

// Called whenever there are no files left in the dropzone anymore, and the

// dropzone should be displayed as if in the initial state.

// Called when a file is added to the queue

// Receives `file`

// Backwards compatibility

// Called whenever a file is removed.

// Called when a thumbnail has been generated

// Receives `file` and `dataUrl`

// Called whenever an error occurs

// Receives `file` and `message`

// Called when a file gets processed. Since there is a cue, not all added

// files are processed immediately.

// Called whenever the upload progress gets updated.

// Receives `file`, `progress` (percentage 0-100) and `bytesSent`.

// To get the total number of bytes of the file, use `file.size`

// Called whenever the total upload progress gets updated.

// Called with totalUploadProgress (0-100), totalBytes and totalBytesSent

// Called just before the file is sent. Gets the `xhr` object as second

// parameter, so you can modify it (for example to add a CSRF token) and a

// `formData` object to add additional information.

// When the complete upload is finished and successful

// When the upload is canceled.

// When the upload is finished, either with success or an error.

// global utility

// Returns all files that have been accepted

// Returns all files that have been rejected

// Not sure when that's going to be useful, but added for completeness.

// Returns all files that are in the queue

// Files that are either queued or uploading

// The function that gets called when Dropzone is initialized. You

// can (and should) setup event listeners inside this function.

// In case it isn't set already

// Not setting `display="none"` because some browsers don't accept clicks

// on elements that aren't displayed.

// Setup all event listeners on the Dropzone object itself.

// They're not in @setupEventListeners() because they shouldn't be removed

// again when the dropzone gets disabled.

// Emit a `queuecomplete` event if all files finished uploading.

// This needs to be deferred so that `queuecomplete` really triggers after `complete`

// Create the listeners

// Makes it possible to drag files from chrome's download bar

// http://stackoverflow.com/questions/19526430/drag-and-drop-file-uploads-from-chrome-downloads-bar

// Try is required to prevent bug in Internet Explorer 11 (SCRIPT65535 exception)

// This is disabled right now, because the browsers don't implement it properly.

// "paste": (e) =>

//   noPropagation e

//   @paste e

// Only the actual dropzone or the message element should trigger file selection

// Not fully tested yet

// @options.paramName can be a function taking one parameter rather than a string.

// A parameter name for a file is obtained simply by calling this with an index number.

// If @options.renameFile is a function,

// the function will be used to rename the file.name before appending it to the formData

// Returns a form that can be used as fallback if the browser does not support DragnDrop

//

// If the dropzone is already a form, only the input field and button are returned. Otherwise a complete form element is provided.

// This code has to pass in IE7 :(

// Make sure that the enctype and method attributes are set properly

// Returns the fallback elements if they exist already

// Activates all listeners stored in @listeners

// Deactivates all listeners stored in @listeners

// Removes all event listeners and cancels all files in the queue or being processed.

// Returns a nicely formatted filesize

// Adds or removes the `dz-max-files-reached` class from the form.

// Convert the FileList to an Array

// This is necessary for IE11

// Even if it's a folder, files.length will contain the folders.

// The browser supports dropping of folders, so handle items instead of files

// When a folder is dropped (or files are pasted), items must be handled

// instead of files.

// Append all files from that directory to files

// Goes through the directory, and adds each file it finds recursively

// Recursively call readEntries() again, since browser only handle

// the first 100 entries.

// See: https://developer.mozilla.org/en-US/docs/Web/API/DirectoryReader#readEntries

// If `done()` is called without argument the file is accepted

// If you call it with an error message, the file is rejected

// (This allows for asynchronous validation)

// This function checks the filesize, and if the file.type passes the

// `acceptedFiles` check.

// Setting the total upload size to file.size for the beginning

// It's actual different than the size to be transmitted.

// Wrapper for enqueueFile

// Deferring the call

// Can be called by the user to remove a file

// Removes all files that aren't currently processed from the list

// Create a copy of files since removeFile() changes the @files array.

// Resizes an image before it gets sent to the server. This function is the default behavior of

// `options.transformFile` if `resizeWidth` or `resizeHeight` are set. The callback is invoked with

// the resized blob.

// The image has not been resized

// Now add the original EXIF information

// Don't bother creating a thumbnail for SVG images since they're vector

// Not using `new Image` here because of a bug in latest Chrome versions.

// See https://github.com/enyo/dropzone/pull/226

// horizontal flip

// 180Â° rotate left

// vertical flip

// vertical flip + 90 rotate right

// 90Â° rotate right

// horizontal flip + 90 rotate right

// 90Â° rotate left

// This is a bugfix for iOS' scaling bug.

// Goes through the queue and processes files if there aren't too many already.

// There are already at least as many files uploading than should be

// The files should be uploaded in one request

// Nothing left to process

// Wrapper for `processFiles`

// Loads the file, then calls finishedLoading()

// Cancels the file upload and sets the status to CANCELED

// **if** the file is actually being uploaded.

// If it's still in the queue, the file is being removed from it and the status

// set to CANCELED.

// This file should be sent in chunks!

// If the chunking option is set, we **know** that there can only be **one** file, since

// uploadMultiple is not allowed with this option.

// Find the next item in file.upload.chunks that is not defined yet.

// This means, that all chunks have already been started.

// In case we want to retry.

// Clear the data from the chunk

// Leaving this reference to xhr intact here will cause memory leaks in some browsers

/// Returns the right chunk for given file and xhr

// This function actually uploads the file(s) to the server.

// If dataBlocks contains the actual data to upload (meaning, that this could either be transformed

// files, or individual chunks for chunked upload).

// Put the xhr object in the file objects to be able to reference it later.

// Put the xhr object in the right chunk object, so it can be associated later, and found with _getChunk

// Setting the timeout after open because of IE11 issue: https://gitlab.com/meno/dropzone/issues/8

// Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179

// Adding all @options parameters

// Let the user add additional data if necessary

// Finally add the files

// Has to be last because some servers (eg: S3) expect the file to be the last parameter

// Transforms all files with this.options.transformFile and invokes done with the transformed files when done.

// Takes care of adding other input elements of the form to the AJAX request

// Take care of other input elements

// If the input doesn't have a name, we can't use it.

// Possibly multiple values

// Invoked when there is new progress information about given files.

// If e is not provided, it is assumed that the upload is finished.

// Since this is a chunked upload, we need to update the appropriate chunk progress.

// Called when the file finished uploading

// Nothing to do, all files already at 100%

// Called internally when processing is finished.

// Individual callbacks have to be called in the appropriate sections.

// Not checking if instance of HTMLElement or Element since IE9 is extremely weird.

// For backwards compatibility since the version was in the prototype previously

// All files

// Now add this dropzone to the instances.

// Put the dropzone inside the element itself.

// If the browser failed, just call the fallback and leave

// @options.url = @element.getAttribute "action" unless @options.url?

// Remove the fallback

// Display previews in the previewsContainer element or the Dropzone element unless explicitly set to false

// This is a map of options for your different dropzones. Add configurations

// to this object for your different dropzone elemens.

// Example:

//     Dropzone.options.myDropzoneElementId = { maxFilesize: 1 };

// To disable autoDiscover for a specific element, you can set `false` as an option:

//     Dropzone.options.myDisabledElementId = false;

// And in html:

//     <form action="/upload" id="my-dropzone-element-id" class="dropzone"></form>

// Returns the options for an element or undefined if none available.

// Get the `Dropzone.options.elementId` for this element if it exists

// Holds a list of all dropzone instances

// Returns the dropzone for given element if any

// Set to false if you don't want Dropzone to automatically find and attach to .dropzone elements.

// Looks for all .dropzone elements and creates a dropzone for them

// IE :(

// Create a dropzone unless auto discover has been disabled for specific element

// Since the whole Drag'n'Drop API is pretty new, some browsers implement it,

// but not correctly.

// So I created a blacklist of userAgents. Yes, yes. Browser sniffing, I know.

// But what to do when browsers *theoretically* support an API, but crash

// when using it.

// This is a list of regular expressions tested against navigator.userAgent

// ** It should only be used on browser that *do* support the API, but

// incorrectly **

// The mac os and windows phone version of opera 12 seems to have a problem with the File drag'n'drop API.

// Checks if the browser is supported

// The browser supports the API, but may be blacklisted.

// convert base64 to raw binary data held in a string

// doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this

// separate out the mime component

// write the ArrayBuffer to a blob

// Returns an array without the rejected item

// abc-def_ghi -> abcDefGhi

// Creates an element from string

// Tests if given element is inside (or simply is) the container

// Coffeescript doesn't support do/while loops

// Asks the user the question and calls accepted or rejected accordingly

// The default implementation just uses `window.confirm` and then calls the

// appropriate callback.

// Validates the mime type like this:

// https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept

// If there are no accepted mime types, it's OK

// This is something like a image/* mime type

// Augment jQuery

// Dropzone file status codes

// For backwards compatibility. Now, if a file is accepted, it's either queued

// or uploading.

// alias

/*

 Bugfix for iOS 6 and 7
 Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
 based on the work of https://github.com/stomita/ios-imagefile-megapixel

 */

// Detecting vertical squash in loaded image.

// Fixes a bug which squash image vertically while drawing into canvas for some images.

// This is a bug in iOS6 devices. This function from https://github.com/stomita/ios-imagefile-megapixel

// search image edge pixel position in case it is squashed vertically.

// A replacement for context.drawImage

// (args are for source and destination).

// As a single function to be able to write tests.

/* 2 */

// module.parent = undefined by default
